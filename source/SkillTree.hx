package;

import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxGroup.FlxTypedGroup;
import flixel.text.FlxText;
import flixel.util.FlxColor;

/**
	To make this skill tree reusable, you would need to create an external data source out of structs or JSON data or whatever else.
	Then you could pass that data into the skill tree constructor, and then loop over that data to create nodes and tooltips out of it.
**/
class SkillTree
{
	// In a bigger game these should probably be made regular variables, and the SkillTree class should be a singleton, otherwise you
	// have a bunch of global static variables that aren't being cleaned up. Unless I intend to make the skill tree available at all times.
	public static var nodes = new FlxTypedGroup<SkillTreeNode>();
	public static var tooltips = new FlxTypedGroup<Tooltip>();

	// WoW talent trees use arrows where the tail of the arrow is underneath the node it's pointing from, while the arrow tip
	// is above the node it's pointing to. I would need to do a little refactoring to make this project work like that.
	public static var lines = new FlxTypedGroup<FlxSprite>();

	/**
		Stores a reference to each skill node by skill name.
	**/
	public static var nodeMap:Map<String, SkillTreeNode> = [];

	public static var availablePoints(default, set) = 0;
	public static var totalPointsSpent = -1;

	static var availablePointsLabel:FlxText;

	public function new()
	{
		FlxG.state.add(lines);
		FlxG.state.add(nodes);
		FlxG.state.add(tooltips);

		availablePointsLabel = new FlxText(0, 0, 200, "", 16);
		availablePointsLabel.font = "Roboto";
		availablePointsLabel.x = FlxG.width - availablePointsLabel.frameWidth - 20;
		availablePointsLabel.y = 20;
		availablePoints = 51;
		FlxG.state.add(availablePointsLabel);

		// Nodes
		var currentNode = new SkillTreeNode(0, 0, 3, 0, "", AssetPaths.icon_improved_heroic_strike__png,
			new Tooltip("Improved Heroic Strike", "Reduces the cost of your Heroic Strike ability by 1 rage point."));
		nodes.add(currentNode);
		nodeMap["Improved Heroic Strike"] = currentNode;

		currentNode = new SkillTreeNode(0, 1, 5, 0, "", AssetPaths.icon_deflection__png, new Tooltip("Deflection", "Increases your parry chance by 1%."));
		nodes.add(currentNode);
		nodeMap["Deflection"] = currentNode;

		currentNode = new SkillTreeNode(0, 2, 3, 0, "", AssetPaths.icon_improved_rend__png,
			new Tooltip("Improved Rend", "Increases the bleed damage done by your Rend ability by 15%."));
		nodes.add(currentNode);
		nodeMap["Improved Rend"] = currentNode;

		// ---

		currentNode = new SkillTreeNode(1, 0, 2, 5, "", AssetPaths.icon_improved_charge__png,
			new Tooltip("Improved Charge", "Increases the amount of rage generated by your Charge ability by 3."));
		nodes.add(currentNode);
		nodeMap["Improved Charge"] = currentNode;

		currentNode = new SkillTreeNode(1, 1, 5, 5, "", AssetPaths.icon_tactical_mastery__png,
			new Tooltip("Tactical Mastery", "You retain up to 5 of your rage points when you change stances."));
		nodes.add(currentNode);
		nodeMap["Tactical Mastery"] = currentNode;

		currentNode = new SkillTreeNode(1, 3, 3, 5, "", AssetPaths.icon_improved_thunder_clap__png,
			new Tooltip("Improved Thunder Clap", "Reduces the rage cost of your Thunder Clap ability by 1 rage point."));
		nodes.add(currentNode);
		nodeMap["Improved Thunder Clap"] = currentNode;

		// ---

		currentNode = new SkillTreeNode(2, 0, 2, 10, "", AssetPaths.icon_improved_overpower__png,
			new Tooltip("Improved Overpower", "Increases the critical strike chance of your Overpower ability by 25%."));
		nodes.add(currentNode);
		nodeMap["Improved Overpower"] = currentNode;

		currentNode = new SkillTreeNode(2, 1, 1, 10, "Tactical Mastery", AssetPaths.icon_anger_management__png,
			new Tooltip("Anger Management", "Increases the time required for your rage to decay while out of combat by 30%."));
		nodes.add(currentNode);
		nodeMap["Anger Management"] = currentNode;

		currentNode = new SkillTreeNode(2, 2, 3, 10, "Improved Rend", AssetPaths.icon_improved_rend__png,
			new Tooltip("Deep Wounds", "Your critical strikes cause the opponent to bleed, dealing 20% of your melee weapon's average damage over 12 sec."));
		nodes.add(currentNode);
		nodeMap["Deep Wounds"] = currentNode;

		// ---

		currentNode = new SkillTreeNode(3, 1, 5, 15, "", AssetPaths.icon_thws__png,
			new Tooltip("Two-Handed Weapon Specialization", "Increases the damage you deal with two-handed weapons by 1%."));
		nodes.add(currentNode);
		nodeMap["Two-Handed Weapon Specialization"] = currentNode;

		currentNode = new SkillTreeNode(3, 2, 2, 15, "Deep Wounds", AssetPaths.icon_improved_heroic_strike__png,
			new Tooltip("Impale", "Increases the critical strike damage bonus of your abilities in Battle, Defensive, and Berserker stance by 10%."));
		nodes.add(currentNode);
		nodeMap["Impale"] = currentNode;

		// ---

		currentNode = new SkillTreeNode(4, 0, 5, 20, "", AssetPaths.icon_axe_spec__png,
			new Tooltip("Axe Specialization", "Increases your chance to get a critical strike with Axes by 1%."));
		nodes.add(currentNode);
		nodeMap["Axe Specialization"] = currentNode;

		currentNode = new SkillTreeNode(4, 1, 1, 20, "", AssetPaths.icon_sweeping_strikes__png,
			new Tooltip("Sweeping Strikes", "Your next 5 melee attacks strike an additional nearby opponent."));
		nodes.add(currentNode);
		nodeMap["Sweeping Strikes"] = currentNode;

		currentNode = new SkillTreeNode(4, 2, 5, 20, "", AssetPaths.icon_mace_spec__png,
			new Tooltip("Mace Specialization", "Gives you a 1% chance to stun your target for 3 sec with a Mace."));
		nodes.add(currentNode);
		nodeMap["Mace Specialization"] = currentNode;

		currentNode = new SkillTreeNode(4, 3, 5, 20, "", AssetPaths.icon_sword_spec__png,
			new Tooltip("Sword Specialization", "Gives you a 1% chance to get an extra attack on the same target after dealing damage with your Sword."));
		nodes.add(currentNode);
		nodeMap["Sword Specialization"] = currentNode;

		// ---

		currentNode = new SkillTreeNode(5, 0, 5, 25, "", AssetPaths.icon_polearm_spec__png,
			new Tooltip("Polearm Specialization", "Increases your chance to get a critical strike with Polearms by 1%."));
		nodes.add(currentNode);
		nodeMap["Polearm Specialization"] = currentNode;

		currentNode = new SkillTreeNode(5, 2, 3, 25, "", AssetPaths.icon_improved_overpower__png,
			new Tooltip("Improved Hamstring", "Gives your Hamstring ability a 5% chance to immobilize the target for 5 sec."));
		nodes.add(currentNode);
		nodeMap["Improved Hamstring"] = currentNode;

		currentNode = new SkillTreeNode(6, 1, 1, 30, "Sweeping Strikes", AssetPaths.icon_mortal_strike__png,
			new Tooltip("Mortal Strike",
				"A vicious strike that deals weapon damage plus 85 and wounds the target, reducing the effectiveness of any healing by 50% for 10 sec."));
		nodes.add(currentNode);
		nodeMap["Mortal Strike"] = currentNode;

		repositionNodes();

		// Lines
		createLine("Improved Rend", "Deep Wounds");
		createLine("Deep Wounds", "Impale");
		createLine("Tactical Mastery", "Anger Management");
		createLine("Sweeping Strikes", "Mortal Strike");
	}

	/**
		Uses the row and column indices of each node to position them in a grid.
	**/
	function repositionNodes()
	{
		for (node in nodes.members)
		{
			node.button.x = 30 + (node.columnIndex * 60);
			node.button.y = 30 + (node.rowIndex * 60);
			node.pointsLabel.x = node.button.x;
			node.pointsLabel.y = node.button.y + node.button.frameHeight;
		}
	}

	/**
		Creates a vertical line between two nodes.
	**/
	function createLine(sourceNode:String, targetNode:String)
	{
		var lineNodePosition = nodeMap[sourceNode].button.getMidpoint();
		var targetLineNodePosition = nodeMap[targetNode].button.getMidpoint();
		var line = new FlxSprite(lineNodePosition.x - 5, lineNodePosition.y);
		var lineHeight = Std.int(targetLineNodePosition.y - lineNodePosition.y);
		line.makeGraphic(10, lineHeight, FlxColor.RED);
		lines.add(line);
	}

	static function set_availablePoints(value)
	{
		availablePoints = value;
		availablePointsLabel.text = 'Available Points: $availablePoints';
		totalPointsSpent++;
		return value;
	}
}
